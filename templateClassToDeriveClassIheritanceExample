// Template class to derive class example
#include <iostream>
using namespace std;

template<class T,int arraySize>
class arrayList
{
protected:
    T num[arraySize];
    T sum;
    void add(T n[])
    {
        sum=0;
        for(int i=0;i<arraySize;i++)
        {
            num[i]=n[i];
            sum=sum+num[i];

        }
         cout<<"Sum of array elements are:"<<sum<<endl;
    }
    void disp()
    {
        cout<<"Array Elements are:"<<endl;
        for(int i=0;i<arraySize;i++)
        {
            cout<<num[i]<<endl;
        }
    }
};
class derive: public arrayList<float,5>
{
public:
    void MyParentFunction()
    {
        float num[]={11.1,2.1,1.1,4.1,6.1};
        add(num);
        disp();
    }
};
int main()
{
    derive d1;
    d1.MyParentFunction();
return 0;
}
