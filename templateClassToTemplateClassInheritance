// template class to template class inheritance example
#include <iostream>

using namespace std;
template<class T,int arraySize>
class arrayList
{
public:
    T num[arraySize];

    void add(T n[])
    {
        for(int i=0;i<arraySize;i++)
        {
            num[i]=n[i];
        }
    }
    void disp()
    {
         cout<<"Array Elements are:"<<endl;
        for(int i=0;i<arraySize;i++)
        {
            cout<<num[i]<<endl;
        }
    }

};
template<class T>
class sortedArray:public arrayList<int,5>
{
public:
    void sorting(T n1[])
    {
        int temp;
        int i,j;
        for(i=0;i<5;i++)
        {
            for(j=i+1;j<5;j++)
            {
                if(n1[i]>n1[j])
                {
                    temp=n1[i];
                    n1[i]=n1[j];
                    n1[j]=temp;
                }
            }
        }
        cout<<"Sorted Elements are:"<<endl;
        for(int i=0;i<5;i++)
        {
            cout<<n1[i]<<endl;
        }
    }
};
int main()
{
int arr[5]={11,2,1,4,6};
sortedArray<int> s1;
s1.add(arr);
s1.disp();
s1.sorting(arr);
return 0;
}
